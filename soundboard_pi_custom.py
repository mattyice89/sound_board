#!/usr/bin/python3

"""
Service Name :  Soundbite Service
    This function is to expected to be running on the host machine and will listen
    to an mqtt in AWS IoT and when a message is received it will play that message
"""


import ssl
import json
import slackweb
import boto3
import pygame
import subprocess
import paho.mqtt.client as mqtt
from sys import exit
from gtts import gTTS

slack = slackweb.Slack(url="https://hooks.slack.com/services/xxx/xxx/xxx")



# AWS Command Line Credentials
cli_aws_session_token = 'xxx'
cli_aws_access_key_id = 'xxx'
cli_aws_secret_access_key = 'xxx'
cli_region_name = 'us-west-2'
s3 = boto3.resource('s3',
                    aws_session_token=cli_aws_session_token,
                    aws_access_key_id=cli_aws_access_key_id,
                    aws_secret_access_key=cli_aws_secret_access_key,
                    region_name=cli_region_name)
bucket = s3.Bucket('soundbites-wav-files')

"""This section will handle all the audio controls.  Initially the sound will be set to 0 and will be controlled
thru a command.  Current commands are /sound, /speak  /volume.  Both volume and speak will have additional parameters
with speak being a string, and volume being a level.
"""
# pygame settings and variables to support the wave files.
pygame.mixer.init(48000, -16, 1, 1024)
pygame.init()


"""
The purpose of this function is to handle setting master volume levels.  Inbound requests will be to set the level from
0 to 100.
"""

def set_os_volume(set_volume_level):
    volume = set_volume_level
    try:
        volume = int(volume)
        if (volume <= 100) and (volume >= 0):
            call(["amixer", "-D", "pulse", "sset", "Master", str(volume)+"%"])
        return
    except ValueError:
        return

"""
This function will handle an incoming text string and output the file as a .wav file for consumption by the audio
player.  Initially audio files will be saved locally, but eventually it may make sense to have audio files created
by a lambda function, saved to S3 and a link is passed to the local application to be played.  This will add to the
latency, but files can be consumed by multiple players.
"""

def convert_text_to_audio(text_to_convert):
    audio_file = ("%s.mp3" % (text_to_convert[:20]))
    tts = gTTS(text=text_to_convert, lang="en")
    tts.save(audio_file)
    return_code = subprocess.call(["mpg123", audio_file]) # mpg123 is the local audio player
    return return_code

def play_sound(sound_file):
    pygame.mixer.music.load("%s.wav") % sound_file
    pygame.mixer.music.play()
    while pygame.mixer.music.get_busy() == True:
        continue
    return

"""
The purpose of this function is to updload .wav files to s3 for consumption by additional players, in addition to handling
instances where the file system on the pi becomes corrupted.
"""
def publish_file_to_s3():
    with open('filename', 'rb') as data:
        bucket.upload_fileobj(data, 'mykey')


"""
This function will fetch the file from s3, if there is no file one will be generated by the python script an stored
locally as well as published to S3.
"""

def fetch_file_from_s3():
    KEY = 'my_image_in_s3.jpg'  # replace with your object key
    try:
        s3.Bucket(BUCKET_NAME).download_file(KEY, 'my_local_image.jpg')
    except botocore.exceptions.ClientError as e:
        if e.response['Error']['Code'] == "404":
            print("The object does not exist.")
        else:
            raise


"""
This function will handle the incoming payload from the mqtt topic and parse what sound is to be played an if this
is a custom request will call the create .wav function.
- Incoming request for a sound to be played (driven by list in slack)
- If canned, play canned sound from list
- If custom respond with what is the custom sound you would like to play?
- User will enter requested text into Slack which will be processed by google tts
- Request will be passed into the IoT queue then back to app for processing.
"""
def on_message(client, userdata, msg):
    message_json = json.loads(msg.payload.decode())
    sound_request = message_json['state']['desired']
    sound_action = message_json['state']['desired']['function']
    print ("client: %s, userData: %s" % (client, userdata))
    try:
        if sound_request == "canned":
            print("woohoo")
            slack.notify(text=":woohoo:")
            play_sound(sound_request)

        # This function will handle a custom wav file
        elif sound_request == "customRequest":
            print("%s") % sound_request
            slack.notify(text = "%s" % sound_file_name)

        elif sound_request == "customText":
            print("%s") % sound_request
            slack.notify(text="%s" % sound_file_name)


    except KeyboardInterrupt:
        exit()



#Connect to AWS IoT
client = mqtt.Client(client_id="tractorRasp")
client.on_connect = on_connect
client.on_message = on_message
client.tls_set(ca_certs='/home/pi/soundboard/soundboard-root-CA.pem',
               certfile='/home/pi/soundboard/xxx-certificate.pem.crt',
               keyfile='/home/pi/soundboard/xxx-private.pem.key',
               tls_version=ssl.PROTOCOL_SSLv23)
client.tls_insecure_set(True)
client.connect("xxx.iot.us-west-2.amazonaws.com", 8883, 30)
client.loop_forever()
